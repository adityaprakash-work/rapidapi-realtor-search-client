"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from datetime import date
from typing import Mapping, Optional

from rapidapi_realtor_search_client import models, utils
from rapidapi_realtor_search_client._hooks import HookContext
from rapidapi_realtor_search_client.types import UNSET, OptionalNullable
from rapidapi_realtor_search_client.utils import get_security_from_env

from .basesdk import BaseSDK


class Properties(BaseSDK):
    def search_buy(
        self,
        *,
        location: str,
        zone_id: Optional[str] = None,
        results_per_page: Optional[int] = 20,
        page: Optional[int] = 1,
        sort_by: Optional[models.SortBy] = models.SortBy.RELEVANCE,
        expand_search_area: Optional[
            models.ExpandSearchArea
        ] = models.ExpandSearchArea.ZERO,
        property_type: Optional[str] = None,
        prices: Optional[str] = None,
        bedrooms: Optional[int] = 0,
        bathrooms: Optional[int] = 1,
        home_size: Optional[str] = None,
        lot_size: Optional[str] = None,
        home_age: Optional[str] = None,
        hide_pending_contingent: Optional[bool] = False,
        new_construction_only: Optional[bool] = False,
        hide_homes_not_yet_built: Optional[bool] = False,
        foreclosures_only: Optional[bool] = False,
        hide_foreclosures: Optional[bool] = False,
        senior_community_only: Optional[bool] = False,
        open_houses_only: Optional[bool] = False,
        price_recently_reduced_only: Optional[bool] = False,
        virtual_tours_only: Optional[bool] = False,
        three_dtours_only: Optional[bool] = False,
        max_hoa_fees_per_month: Optional[int] = None,
        show_homes_where_hoa_is_not_known: Optional[bool] = False,
        days_on_realtor: Optional[int] = None,
        garage_parking: Optional[str] = None,
        heating_cooling: Optional[str] = None,
        home_features: Optional[str] = None,
        lot_features: Optional[str] = None,
        community_features: Optional[str] = None,
        nyc_amenities: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SearchBuyResponse:
        r"""Search for properties to buy

        :param location: Location can be retrieved from /properties/auto-complete endpoint (data->autocomplete->id). Example: city:New York, NY
        :param zone_id: For accurate results, you should select the correct zoneId for your area. Example: America/New_York
        :param results_per_page: Total number of records per API call. Example: 20
        :param page: The page index, for paging purpose. Example: 2
        :param sort_by: Sort by. Example: relevance
        :param expand_search_area: Expand search area. Example: 1
        :param property_type: Property type. It can input multiple values, and the values should be separated by commas. Example: condo,co_op
        :param prices: Prices. Min and max prices should be separated by commas. Example: 1200,12345 In the case of only having the minimum price: Example: 1200, In the case of only having the maximum price: Example: ,12345 In case of having both: Example: 1200,12345
        :param bedrooms: Bedrooms. It has a value ranging from 0 to 5. Example: 5
        :param bathrooms: Bathrooms. It has a value ranging from 1 to 5. Example: 5
        :param home_size: Home size. Min and max home size should be separated by commas. Example: 500,1000 In the case of only having the minimum size: Example: 500, In the case of only having the maximum size: Example: ,1000 In case of having both: Example: 500,1000 Some example values: 500: 500 sqft 750: 750 sqft 1000: 1000 sqft
        :param lot_size: Lot size. Min and max lot size should be separated by commas. Example: 2000,7500
        :param home_age: Home age. Min and max home age should be separated by commas. Example: 1,5
        :param hide_pending_contingent: Hide pending/contingent.
        :param new_construction_only: New construction only.
        :param hide_homes_not_yet_built: Hide homes not yet built.
        :param foreclosures_only: Foreclosures only.
        :param hide_foreclosures: Hide foreclosures.
        :param senior_community_only: 55+ community only.
        :param open_houses_only: Open houses only.
        :param price_recently_reduced_only: Price recently reduced only.
        :param virtual_tours_only: Virtual tours only.
        :param three_dtours_only: 3D tours only.
        :param max_hoa_fees_per_month: Max HOA fees per month. Example: 0
        :param show_homes_where_hoa_is_not_known: Show homes where HOA is not known.
        :param days_on_realtor: Days on realtor.com. Example: 7
        :param garage_parking: Garage/Parking. It can input multiple values, and the values should be separated by commas. Example: garage_1_or_more,garage_2_or_more garage_1_or_more: Garage (any) garage_2_or_more: Garage (2+ cars) garage_3_or_more: Garage (3+ cars) carport: Carport rv_or_boat_parking: RV/Boat Parking
        :param heating_cooling: Heating/Cooling. It can input multiple values, and the values should be separated by commas. Example: central_air,central_heat central_air: Central Air central_heat: Central Heat forced_air: Forced Air energy_efficient: Energy Efficient
        :param home_features: Home features. It can input multiple values, and the values should be separated by commas. Example: basement,den_or_office basement: Basement den_or_office: Den/Office dining_room: Dining Room family_room: Family Room game_room: Game Room washer_dryer: In-home Laundry disability_features: Accessibility Features fireplace: Fireplace hardwood_floors: Hardwood Floors horse_facilities: Horse Facilities spa_or_hot_tub: Spa/Hot Tub swimming_pool: Swimming Pool tennis_court: Tennis Court single_story: Single Story two_or_more_stories: Multi-Story lease_option: Lease Option pets_allowed: Pets Allowed
        :param lot_features: Lot features. It can input multiple values, and the values should be separated by commas. Example: corner_lot,cul_de_sac corner_lot: Corner Lot cul_de_sac: Cul de Sac golf_course_lot_or_frontage: Golf Course Lot waterfront: Waterfront city_view: City View golf_course_view: Golf Course View hill_or_mountain_view: Hill/Mountain View lake_view: Lake View ocean_view: Ocean View river_view: River View water_view: Water View view: View (any)
        :param community_features: Community features. It can input multiple values, and the values should be separated by commas. Example: community_swimming_pool,community_boat_facilities community_swimming_pool: Swimming Pool community_boat_facilities: Boat Facilities community_spa_or_hot_tub: Spa/Hot Tub community_tennis_court: Tennis Court(s) community_golf: Golf community_clubhouse: Clubhouse community_security_features: Security Features senior_community: Senior Community community_horse_facilities: Horse Facilities community_park: Park recreation_facilities: Recreation Facilities
        :param nyc_amenities: NYC amenities. It can input multiple values, and the values should be separated by commas. Example: community_doorman,community_elevator community_doorman: Doorman community_elevator: Elevator dishwasher: Dishwasher community_outdoor_space: Outdoor Space laundry_room: Laundry Room
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SearchBuyRequest(
            location=location,
            zone_id=zone_id,
            results_per_page=results_per_page,
            page=page,
            sort_by=sort_by,
            expand_search_area=expand_search_area,
            property_type=property_type,
            prices=prices,
            bedrooms=bedrooms,
            bathrooms=bathrooms,
            home_size=home_size,
            lot_size=lot_size,
            home_age=home_age,
            hide_pending_contingent=hide_pending_contingent,
            new_construction_only=new_construction_only,
            hide_homes_not_yet_built=hide_homes_not_yet_built,
            foreclosures_only=foreclosures_only,
            hide_foreclosures=hide_foreclosures,
            senior_community_only=senior_community_only,
            open_houses_only=open_houses_only,
            price_recently_reduced_only=price_recently_reduced_only,
            virtual_tours_only=virtual_tours_only,
            three_dtours_only=three_dtours_only,
            max_hoa_fees_per_month=max_hoa_fees_per_month,
            show_homes_where_hoa_is_not_known=show_homes_where_hoa_is_not_known,
            days_on_realtor=days_on_realtor,
            garage_parking=garage_parking,
            heating_cooling=heating_cooling,
            home_features=home_features,
            lot_features=lot_features,
            community_features=community_features,
            nyc_amenities=nyc_amenities,
        )

        req = self._build_request(
            method="GET",
            path="/properties/search-buy",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="searchBuy",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.SearchBuyResponse)
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def search_buy_async(
        self,
        *,
        location: str,
        zone_id: Optional[str] = None,
        results_per_page: Optional[int] = 20,
        page: Optional[int] = 1,
        sort_by: Optional[models.SortBy] = models.SortBy.RELEVANCE,
        expand_search_area: Optional[
            models.ExpandSearchArea
        ] = models.ExpandSearchArea.ZERO,
        property_type: Optional[str] = None,
        prices: Optional[str] = None,
        bedrooms: Optional[int] = 0,
        bathrooms: Optional[int] = 1,
        home_size: Optional[str] = None,
        lot_size: Optional[str] = None,
        home_age: Optional[str] = None,
        hide_pending_contingent: Optional[bool] = False,
        new_construction_only: Optional[bool] = False,
        hide_homes_not_yet_built: Optional[bool] = False,
        foreclosures_only: Optional[bool] = False,
        hide_foreclosures: Optional[bool] = False,
        senior_community_only: Optional[bool] = False,
        open_houses_only: Optional[bool] = False,
        price_recently_reduced_only: Optional[bool] = False,
        virtual_tours_only: Optional[bool] = False,
        three_dtours_only: Optional[bool] = False,
        max_hoa_fees_per_month: Optional[int] = None,
        show_homes_where_hoa_is_not_known: Optional[bool] = False,
        days_on_realtor: Optional[int] = None,
        garage_parking: Optional[str] = None,
        heating_cooling: Optional[str] = None,
        home_features: Optional[str] = None,
        lot_features: Optional[str] = None,
        community_features: Optional[str] = None,
        nyc_amenities: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SearchBuyResponse:
        r"""Search for properties to buy

        :param location: Location can be retrieved from /properties/auto-complete endpoint (data->autocomplete->id). Example: city:New York, NY
        :param zone_id: For accurate results, you should select the correct zoneId for your area. Example: America/New_York
        :param results_per_page: Total number of records per API call. Example: 20
        :param page: The page index, for paging purpose. Example: 2
        :param sort_by: Sort by. Example: relevance
        :param expand_search_area: Expand search area. Example: 1
        :param property_type: Property type. It can input multiple values, and the values should be separated by commas. Example: condo,co_op
        :param prices: Prices. Min and max prices should be separated by commas. Example: 1200,12345 In the case of only having the minimum price: Example: 1200, In the case of only having the maximum price: Example: ,12345 In case of having both: Example: 1200,12345
        :param bedrooms: Bedrooms. It has a value ranging from 0 to 5. Example: 5
        :param bathrooms: Bathrooms. It has a value ranging from 1 to 5. Example: 5
        :param home_size: Home size. Min and max home size should be separated by commas. Example: 500,1000 In the case of only having the minimum size: Example: 500, In the case of only having the maximum size: Example: ,1000 In case of having both: Example: 500,1000 Some example values: 500: 500 sqft 750: 750 sqft 1000: 1000 sqft
        :param lot_size: Lot size. Min and max lot size should be separated by commas. Example: 2000,7500
        :param home_age: Home age. Min and max home age should be separated by commas. Example: 1,5
        :param hide_pending_contingent: Hide pending/contingent.
        :param new_construction_only: New construction only.
        :param hide_homes_not_yet_built: Hide homes not yet built.
        :param foreclosures_only: Foreclosures only.
        :param hide_foreclosures: Hide foreclosures.
        :param senior_community_only: 55+ community only.
        :param open_houses_only: Open houses only.
        :param price_recently_reduced_only: Price recently reduced only.
        :param virtual_tours_only: Virtual tours only.
        :param three_dtours_only: 3D tours only.
        :param max_hoa_fees_per_month: Max HOA fees per month. Example: 0
        :param show_homes_where_hoa_is_not_known: Show homes where HOA is not known.
        :param days_on_realtor: Days on realtor.com. Example: 7
        :param garage_parking: Garage/Parking. It can input multiple values, and the values should be separated by commas. Example: garage_1_or_more,garage_2_or_more garage_1_or_more: Garage (any) garage_2_or_more: Garage (2+ cars) garage_3_or_more: Garage (3+ cars) carport: Carport rv_or_boat_parking: RV/Boat Parking
        :param heating_cooling: Heating/Cooling. It can input multiple values, and the values should be separated by commas. Example: central_air,central_heat central_air: Central Air central_heat: Central Heat forced_air: Forced Air energy_efficient: Energy Efficient
        :param home_features: Home features. It can input multiple values, and the values should be separated by commas. Example: basement,den_or_office basement: Basement den_or_office: Den/Office dining_room: Dining Room family_room: Family Room game_room: Game Room washer_dryer: In-home Laundry disability_features: Accessibility Features fireplace: Fireplace hardwood_floors: Hardwood Floors horse_facilities: Horse Facilities spa_or_hot_tub: Spa/Hot Tub swimming_pool: Swimming Pool tennis_court: Tennis Court single_story: Single Story two_or_more_stories: Multi-Story lease_option: Lease Option pets_allowed: Pets Allowed
        :param lot_features: Lot features. It can input multiple values, and the values should be separated by commas. Example: corner_lot,cul_de_sac corner_lot: Corner Lot cul_de_sac: Cul de Sac golf_course_lot_or_frontage: Golf Course Lot waterfront: Waterfront city_view: City View golf_course_view: Golf Course View hill_or_mountain_view: Hill/Mountain View lake_view: Lake View ocean_view: Ocean View river_view: River View water_view: Water View view: View (any)
        :param community_features: Community features. It can input multiple values, and the values should be separated by commas. Example: community_swimming_pool,community_boat_facilities community_swimming_pool: Swimming Pool community_boat_facilities: Boat Facilities community_spa_or_hot_tub: Spa/Hot Tub community_tennis_court: Tennis Court(s) community_golf: Golf community_clubhouse: Clubhouse community_security_features: Security Features senior_community: Senior Community community_horse_facilities: Horse Facilities community_park: Park recreation_facilities: Recreation Facilities
        :param nyc_amenities: NYC amenities. It can input multiple values, and the values should be separated by commas. Example: community_doorman,community_elevator community_doorman: Doorman community_elevator: Elevator dishwasher: Dishwasher community_outdoor_space: Outdoor Space laundry_room: Laundry Room
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SearchBuyRequest(
            location=location,
            zone_id=zone_id,
            results_per_page=results_per_page,
            page=page,
            sort_by=sort_by,
            expand_search_area=expand_search_area,
            property_type=property_type,
            prices=prices,
            bedrooms=bedrooms,
            bathrooms=bathrooms,
            home_size=home_size,
            lot_size=lot_size,
            home_age=home_age,
            hide_pending_contingent=hide_pending_contingent,
            new_construction_only=new_construction_only,
            hide_homes_not_yet_built=hide_homes_not_yet_built,
            foreclosures_only=foreclosures_only,
            hide_foreclosures=hide_foreclosures,
            senior_community_only=senior_community_only,
            open_houses_only=open_houses_only,
            price_recently_reduced_only=price_recently_reduced_only,
            virtual_tours_only=virtual_tours_only,
            three_dtours_only=three_dtours_only,
            max_hoa_fees_per_month=max_hoa_fees_per_month,
            show_homes_where_hoa_is_not_known=show_homes_where_hoa_is_not_known,
            days_on_realtor=days_on_realtor,
            garage_parking=garage_parking,
            heating_cooling=heating_cooling,
            home_features=home_features,
            lot_features=lot_features,
            community_features=community_features,
            nyc_amenities=nyc_amenities,
        )

        req = self._build_request_async(
            method="GET",
            path="/properties/search-buy",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="searchBuy",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.SearchBuyResponse)
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def search_rent(
        self,
        *,
        location: str,
        zone_id: Optional[str] = None,
        results_per_page: Optional[int] = 20,
        page: Optional[int] = 1,
        sort_by: Optional[models.SortBy] = models.SortBy.RELEVANCE,
        expand_search_area: Optional[
            models.ExpandSearchArea
        ] = models.ExpandSearchArea.ZERO,
        property_type: Optional[str] = None,
        prices: Optional[str] = None,
        bedrooms: Optional[int] = 0,
        bathrooms: Optional[int] = 1,
        move_in_date: Optional[date] = None,
        home_size: Optional[str] = None,
        three_dtours_only: Optional[bool] = False,
        pets: Optional[str] = None,
        features: Optional[str] = None,
        nyc_amenities: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SearchRentResponse:
        r"""Search for properties to rent

        :param location: Location can be retrieved from /properties/auto-complete endpoint (data->autocomplete->id). Example: city:New York, NY
        :param zone_id: For accurate results, you should select the correct zoneId for your area. Example: America/New_York
        :param results_per_page: Total number of records per API call. Example: 20
        :param page: The page index, for paging purpose. Example: 2
        :param sort_by: Sort by. Example: relevance
        :param expand_search_area: Expand search area. Example: 1
        :param property_type: Property type. It can input multiple values, and the values should be separated by commas. Example: condo,co_op
        :param prices: Prices. Min and max prices should be separated by commas. Example: 1200,12345 In the case of only having the minimum price: Example: 1200, In the case of only having the maximum price: Example: ,12345 In case of having both: Example: 1200,12345
        :param bedrooms: Bedrooms. It has a value ranging from 0 to 5. Example: 5
        :param bathrooms: Bathrooms. It has a value ranging from 1 to 5. Example: 5
        :param move_in_date: Move-in date. Show listings available by this date. Example: 2024-05-01
        :param home_size: Home size. Min and max home size should be separated by commas. Example: 500,1000 In the case of only having the minimum size: Example: 500, In the case of only having the maximum size: Example: ,1000 In case of having both: Example: 500,1000 Some example values: 500: 500 sqft 750: 750 sqft 1000: 1000 sqft
        :param three_dtours_only: 3D tours only.
        :param pets: Pets. It can input multiple values, and the values should be separated by commas. Example: cats,dogs cats: Cats OK dogs: Dogs OK no_pets_allowed: No Pets Allowed
        :param features: Features. It can input multiple values, and the values should be separated by commas. Example: washer_dryer,garage_1_or_more washer_dryer: In-home Laundry garage_1_or_more: Parking central_air: Air Conditioning swimming_pool: Pool community_gym: Gym/Fitness Center
        :param nyc_amenities: NYC amenities. It can input multiple values, and the values should be separated by commas. Example: community_doorman,community_elevator community_doorman: Doorman community_elevator: Elevator dishwasher: Dishwasher community_outdoor_space: Outdoor Space laundry_room: Laundry Room
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SearchRentRequest(
            location=location,
            zone_id=zone_id,
            results_per_page=results_per_page,
            page=page,
            sort_by=sort_by,
            expand_search_area=expand_search_area,
            property_type=property_type,
            prices=prices,
            bedrooms=bedrooms,
            bathrooms=bathrooms,
            move_in_date=move_in_date,
            home_size=home_size,
            three_dtours_only=three_dtours_only,
            pets=pets,
            features=features,
            nyc_amenities=nyc_amenities,
        )

        req = self._build_request(
            method="GET",
            path="/properties/search-rent",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="searchRent",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.SearchRentResponse)
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def search_rent_async(
        self,
        *,
        location: str,
        zone_id: Optional[str] = None,
        results_per_page: Optional[int] = 20,
        page: Optional[int] = 1,
        sort_by: Optional[models.SortBy] = models.SortBy.RELEVANCE,
        expand_search_area: Optional[
            models.ExpandSearchArea
        ] = models.ExpandSearchArea.ZERO,
        property_type: Optional[str] = None,
        prices: Optional[str] = None,
        bedrooms: Optional[int] = 0,
        bathrooms: Optional[int] = 1,
        move_in_date: Optional[date] = None,
        home_size: Optional[str] = None,
        three_dtours_only: Optional[bool] = False,
        pets: Optional[str] = None,
        features: Optional[str] = None,
        nyc_amenities: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SearchRentResponse:
        r"""Search for properties to rent

        :param location: Location can be retrieved from /properties/auto-complete endpoint (data->autocomplete->id). Example: city:New York, NY
        :param zone_id: For accurate results, you should select the correct zoneId for your area. Example: America/New_York
        :param results_per_page: Total number of records per API call. Example: 20
        :param page: The page index, for paging purpose. Example: 2
        :param sort_by: Sort by. Example: relevance
        :param expand_search_area: Expand search area. Example: 1
        :param property_type: Property type. It can input multiple values, and the values should be separated by commas. Example: condo,co_op
        :param prices: Prices. Min and max prices should be separated by commas. Example: 1200,12345 In the case of only having the minimum price: Example: 1200, In the case of only having the maximum price: Example: ,12345 In case of having both: Example: 1200,12345
        :param bedrooms: Bedrooms. It has a value ranging from 0 to 5. Example: 5
        :param bathrooms: Bathrooms. It has a value ranging from 1 to 5. Example: 5
        :param move_in_date: Move-in date. Show listings available by this date. Example: 2024-05-01
        :param home_size: Home size. Min and max home size should be separated by commas. Example: 500,1000 In the case of only having the minimum size: Example: 500, In the case of only having the maximum size: Example: ,1000 In case of having both: Example: 500,1000 Some example values: 500: 500 sqft 750: 750 sqft 1000: 1000 sqft
        :param three_dtours_only: 3D tours only.
        :param pets: Pets. It can input multiple values, and the values should be separated by commas. Example: cats,dogs cats: Cats OK dogs: Dogs OK no_pets_allowed: No Pets Allowed
        :param features: Features. It can input multiple values, and the values should be separated by commas. Example: washer_dryer,garage_1_or_more washer_dryer: In-home Laundry garage_1_or_more: Parking central_air: Air Conditioning swimming_pool: Pool community_gym: Gym/Fitness Center
        :param nyc_amenities: NYC amenities. It can input multiple values, and the values should be separated by commas. Example: community_doorman,community_elevator community_doorman: Doorman community_elevator: Elevator dishwasher: Dishwasher community_outdoor_space: Outdoor Space laundry_room: Laundry Room
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SearchRentRequest(
            location=location,
            zone_id=zone_id,
            results_per_page=results_per_page,
            page=page,
            sort_by=sort_by,
            expand_search_area=expand_search_area,
            property_type=property_type,
            prices=prices,
            bedrooms=bedrooms,
            bathrooms=bathrooms,
            move_in_date=move_in_date,
            home_size=home_size,
            three_dtours_only=three_dtours_only,
            pets=pets,
            features=features,
            nyc_amenities=nyc_amenities,
        )

        req = self._build_request_async(
            method="GET",
            path="/properties/search-rent",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="searchRent",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.SearchRentResponse)
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def search_sold(
        self,
        *,
        location: str,
        zone_id: Optional[str] = None,
        min_sold_date: Optional[date] = None,
        results_per_page: Optional[int] = 20,
        page: Optional[int] = 1,
        sort_by: Optional[models.SortBySold] = models.SortBySold.LOWEST_PRICE,
        expand_search_area: Optional[
            models.ExpandSearchArea
        ] = models.ExpandSearchArea.ZERO,
        property_type: Optional[str] = None,
        prices: Optional[str] = None,
        bedrooms: Optional[int] = 0,
        bathrooms: Optional[int] = 1,
        home_size: Optional[str] = None,
        lot_size: Optional[str] = None,
        home_age: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SearchSoldResponseBody:
        r"""Search for sold properties

        :param location: Location can be retrieved from /properties/auto-complete endpoint (data->autocomplete->id). Example: city:New York, NY
        :param zone_id: For accurate results, you should select the correct zoneId for your area. Example: America/New_York
        :param min_sold_date: Min sold date. Example: 2024-02-19
        :param results_per_page: Total number of records per API call. Example: 20
        :param page: The page index, for paging purpose. Example: 2
        :param sort_by: Sort by. Example: lowest_price
        :param expand_search_area: Expand search area. Example: 1
        :param property_type: Property type. It can input multiple values, and the values should be separated by commas. Example: condo,co_op
        :param prices: Prices. Min and max prices should be separated by commas. Example: 1200,12345 In the case of only having the minimum price: Example: 1200, In the case of only having the maximum price: Example: ,12345 In case of having both: Example: 1200,12345
        :param bedrooms: Bedrooms. It has a value ranging from 0 to 5. Example: 5
        :param bathrooms: Bathrooms. It has a value ranging from 1 to 5. Example: 5
        :param home_size: Home size. Min and max home size should be separated by commas. Example: 500,1000 In the case of only having the minimum size: Example: 500, In the case of only having the maximum size: Example: ,1000 In case of having both: Example: 500,1000 Some example values: 500: 500 sqft 750: 750 sqft 1000: 1000 sqft
        :param lot_size: Lot size. Min and max lot size should be separated by commas. Example: 2000,7500
        :param home_age: Home age. Min and max home age should be separated by commas. Example: 1,5
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SearchSoldRequest(
            location=location,
            zone_id=zone_id,
            min_sold_date=min_sold_date,
            results_per_page=results_per_page,
            page=page,
            sort_by=sort_by,
            expand_search_area=expand_search_area,
            property_type=property_type,
            prices=prices,
            bedrooms=bedrooms,
            bathrooms=bathrooms,
            home_size=home_size,
            lot_size=lot_size,
            home_age=home_age,
        )

        req = self._build_request(
            method="GET",
            path="/properties/search-sold",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="searchSold",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.SearchSoldResponseBody)
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def search_sold_async(
        self,
        *,
        location: str,
        zone_id: Optional[str] = None,
        min_sold_date: Optional[date] = None,
        results_per_page: Optional[int] = 20,
        page: Optional[int] = 1,
        sort_by: Optional[models.SortBySold] = models.SortBySold.LOWEST_PRICE,
        expand_search_area: Optional[
            models.ExpandSearchArea
        ] = models.ExpandSearchArea.ZERO,
        property_type: Optional[str] = None,
        prices: Optional[str] = None,
        bedrooms: Optional[int] = 0,
        bathrooms: Optional[int] = 1,
        home_size: Optional[str] = None,
        lot_size: Optional[str] = None,
        home_age: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.SearchSoldResponseBody:
        r"""Search for sold properties

        :param location: Location can be retrieved from /properties/auto-complete endpoint (data->autocomplete->id). Example: city:New York, NY
        :param zone_id: For accurate results, you should select the correct zoneId for your area. Example: America/New_York
        :param min_sold_date: Min sold date. Example: 2024-02-19
        :param results_per_page: Total number of records per API call. Example: 20
        :param page: The page index, for paging purpose. Example: 2
        :param sort_by: Sort by. Example: lowest_price
        :param expand_search_area: Expand search area. Example: 1
        :param property_type: Property type. It can input multiple values, and the values should be separated by commas. Example: condo,co_op
        :param prices: Prices. Min and max prices should be separated by commas. Example: 1200,12345 In the case of only having the minimum price: Example: 1200, In the case of only having the maximum price: Example: ,12345 In case of having both: Example: 1200,12345
        :param bedrooms: Bedrooms. It has a value ranging from 0 to 5. Example: 5
        :param bathrooms: Bathrooms. It has a value ranging from 1 to 5. Example: 5
        :param home_size: Home size. Min and max home size should be separated by commas. Example: 500,1000 In the case of only having the minimum size: Example: 500, In the case of only having the maximum size: Example: ,1000 In case of having both: Example: 500,1000 Some example values: 500: 500 sqft 750: 750 sqft 1000: 1000 sqft
        :param lot_size: Lot size. Min and max lot size should be separated by commas. Example: 2000,7500
        :param home_age: Home age. Min and max home age should be separated by commas. Example: 1,5
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SearchSoldRequest(
            location=location,
            zone_id=zone_id,
            min_sold_date=min_sold_date,
            results_per_page=results_per_page,
            page=page,
            sort_by=sort_by,
            expand_search_area=expand_search_area,
            property_type=property_type,
            prices=prices,
            bedrooms=bedrooms,
            bathrooms=bathrooms,
            home_size=home_size,
            lot_size=lot_size,
            home_age=home_age,
        )

        req = self._build_request_async(
            method="GET",
            path="/properties/search-sold",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="searchSold",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.SearchSoldResponseBody)
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def auto_complete(
        self,
        *,
        input_: str,
        limit: Optional[int] = 10,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AutoCompleteResponse:
        r"""Auto-complete for properties

        :param input: States, cities, districts, addresses, zipcode. Example: New York
        :param limit: The number of items per response, for paging purpose. Example: 2
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AutoCompleteRequest(
            input=input_,
            limit=limit,
        )

        req = self._build_request(
            method="GET",
            path="/properties/auto-complete",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="autoComplete",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.AutoCompleteResponse)
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def auto_complete_async(
        self,
        *,
        input_: str,
        limit: Optional[int] = 10,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.AutoCompleteResponse:
        r"""Auto-complete for properties

        :param input: States, cities, districts, addresses, zipcode. Example: New York
        :param limit: The number of items per response, for paging purpose. Example: 2
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.AutoCompleteRequest(
            input=input_,
            limit=limit,
        )

        req = self._build_request_async(
            method="GET",
            path="/properties/auto-complete",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="autoComplete",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.AutoCompleteResponse)
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_details(
        self,
        *,
        property_id: str,
        listing_id: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PropertyDetailResponse:
        r"""Get property details

        :param property_id: propertyId can be retrieved from /properties/search-buy or /properties/search-rent or /properties/search-sold or /properties/search-mls-id endpoint (data->results->property_id). Example: 4752427680
        :param listing_id: listingId can be retrieved from /properties/search-buy or /properties/search-rent or /properties/search-sold or /properties/search-mls-id endpoint (data->results->listing_id). Example: 2964420807
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetPropertyDetailsRequest(
            property_id=property_id,
            listing_id=listing_id,
        )

        req = self._build_request(
            method="GET",
            path="/properties/detail",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getPropertyDetails",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.PropertyDetailResponse)
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_details_async(
        self,
        *,
        property_id: str,
        listing_id: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PropertyDetailResponse:
        r"""Get property details

        :param property_id: propertyId can be retrieved from /properties/search-buy or /properties/search-rent or /properties/search-sold or /properties/search-mls-id endpoint (data->results->property_id). Example: 4752427680
        :param listing_id: listingId can be retrieved from /properties/search-buy or /properties/search-rent or /properties/search-sold or /properties/search-mls-id endpoint (data->results->listing_id). Example: 2964420807
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetPropertyDetailsRequest(
            property_id=property_id,
            listing_id=listing_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/properties/detail",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="getPropertyDetails",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["400", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.PropertyDetailResponse)
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
