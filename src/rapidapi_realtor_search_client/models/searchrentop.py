"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .expandsearcharea import ExpandSearchArea
from .sortby import SortBy
from datetime import date
import pydantic
from rapidapi_realtor_search_client.types import BaseModel
from rapidapi_realtor_search_client.utils import FieldMetadata, QueryParamMetadata
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SearchRentRequestTypedDict(TypedDict):
    location: str
    r"""Location can be retrieved from /properties/auto-complete endpoint (data->autocomplete->id).
    Example: city:New York, NY

    """
    zone_id: NotRequired[str]
    r"""For accurate results, you should select the correct zoneId for your area.
    Example: America/New_York

    """
    results_per_page: NotRequired[int]
    r"""Total number of records per API call.
    Example: 20

    """
    page: NotRequired[int]
    r"""The page index, for paging purpose.
    Example: 2

    """
    sort_by: NotRequired[SortBy]
    r"""Sort by.
    Example: relevance

    """
    expand_search_area: NotRequired[ExpandSearchArea]
    r"""Expand search area.
    Example: 1

    """
    property_type: NotRequired[str]
    r"""Property type. It can input multiple values, and the values should be separated by commas.
    Example: condo,co_op

    """
    prices: NotRequired[str]
    r"""Prices. Min and max prices should be separated by commas.
    Example: 1200,12345
    In the case of only having the minimum price: Example: 1200,
    In the case of only having the maximum price: Example: ,12345
    In case of having both: Example: 1200,12345

    """
    bedrooms: NotRequired[int]
    r"""Bedrooms. It has a value ranging from 0 to 5.
    Example: 5

    """
    bathrooms: NotRequired[int]
    r"""Bathrooms. It has a value ranging from 1 to 5.
    Example: 5

    """
    move_in_date: NotRequired[date]
    r"""Move-in date. Show listings available by this date.
    Example: 2024-05-01

    """
    home_size: NotRequired[str]
    r"""Home size. Min and max home size should be separated by commas.
    Example: 500,1000
    In the case of only having the minimum size: Example: 500,
    In the case of only having the maximum size: Example: ,1000
    In case of having both: Example: 500,1000
    Some example values:
    500: 500 sqft
    750: 750 sqft
    1000: 1000 sqft

    """
    three_dtours_only: NotRequired[bool]
    r"""3D tours only.

    """
    pets: NotRequired[str]
    r"""Pets. It can input multiple values, and the values should be separated by commas.
    Example: cats,dogs
    cats: Cats OK
    dogs: Dogs OK
    no_pets_allowed: No Pets Allowed

    """
    features: NotRequired[str]
    r"""Features. It can input multiple values, and the values should be separated by commas.
    Example: washer_dryer,garage_1_or_more
    washer_dryer: In-home Laundry
    garage_1_or_more: Parking
    central_air: Air Conditioning
    swimming_pool: Pool
    community_gym: Gym/Fitness Center

    """
    nyc_amenities: NotRequired[str]
    r"""NYC amenities. It can input multiple values, and the values should be separated by commas.
    Example: community_doorman,community_elevator
    community_doorman: Doorman
    community_elevator: Elevator
    dishwasher: Dishwasher
    community_outdoor_space: Outdoor Space
    laundry_room: Laundry Room

    """


class SearchRentRequest(BaseModel):
    location: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""Location can be retrieved from /properties/auto-complete endpoint (data->autocomplete->id).
    Example: city:New York, NY

    """

    zone_id: Annotated[
        Optional[str],
        pydantic.Field(alias="zoneId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""For accurate results, you should select the correct zoneId for your area.
    Example: America/New_York

    """

    results_per_page: Annotated[
        Optional[int],
        pydantic.Field(alias="resultsPerPage"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 20
    r"""Total number of records per API call.
    Example: 20

    """

    page: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""The page index, for paging purpose.
    Example: 2

    """

    sort_by: Annotated[
        Optional[SortBy],
        pydantic.Field(alias="sortBy"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = SortBy.RELEVANCE
    r"""Sort by.
    Example: relevance

    """

    expand_search_area: Annotated[
        Optional[ExpandSearchArea],
        pydantic.Field(alias="expandSearchArea"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ExpandSearchArea.ZERO
    r"""Expand search area.
    Example: 1

    """

    property_type: Annotated[
        Optional[str],
        pydantic.Field(alias="propertyType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Property type. It can input multiple values, and the values should be separated by commas.
    Example: condo,co_op

    """

    prices: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Prices. Min and max prices should be separated by commas.
    Example: 1200,12345
    In the case of only having the minimum price: Example: 1200,
    In the case of only having the maximum price: Example: ,12345
    In case of having both: Example: 1200,12345

    """

    bedrooms: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Bedrooms. It has a value ranging from 0 to 5.
    Example: 5

    """

    bathrooms: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Bathrooms. It has a value ranging from 1 to 5.
    Example: 5

    """

    move_in_date: Annotated[
        Optional[date],
        pydantic.Field(alias="moveInDate"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Move-in date. Show listings available by this date.
    Example: 2024-05-01

    """

    home_size: Annotated[
        Optional[str],
        pydantic.Field(alias="homeSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Home size. Min and max home size should be separated by commas.
    Example: 500,1000
    In the case of only having the minimum size: Example: 500,
    In the case of only having the maximum size: Example: ,1000
    In case of having both: Example: 500,1000
    Some example values:
    500: 500 sqft
    750: 750 sqft
    1000: 1000 sqft

    """

    three_dtours_only: Annotated[
        Optional[bool],
        pydantic.Field(alias="threeDtoursOnly"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""3D tours only.

    """

    pets: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Pets. It can input multiple values, and the values should be separated by commas.
    Example: cats,dogs
    cats: Cats OK
    dogs: Dogs OK
    no_pets_allowed: No Pets Allowed

    """

    features: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Features. It can input multiple values, and the values should be separated by commas.
    Example: washer_dryer,garage_1_or_more
    washer_dryer: In-home Laundry
    garage_1_or_more: Parking
    central_air: Air Conditioning
    swimming_pool: Pool
    community_gym: Gym/Fitness Center

    """

    nyc_amenities: Annotated[
        Optional[str],
        pydantic.Field(alias="nycAmenities"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""NYC amenities. It can input multiple values, and the values should be separated by commas.
    Example: community_doorman,community_elevator
    community_doorman: Doorman
    community_elevator: Elevator
    dishwasher: Dishwasher
    community_outdoor_space: Outdoor Space
    laundry_room: Laundry Room

    """
