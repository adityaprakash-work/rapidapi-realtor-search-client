"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .boundary import Boundary, BoundaryTypedDict
from .meta import Meta, MetaTypedDict
from .property import Property, PropertyTypedDict
from pydantic import model_serializer
from rapidapi_realtor_search_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import Any, List, Optional
from typing_extensions import NotRequired, TypedDict


class SearchRentResponseDataTypedDict(TypedDict):
    count: NotRequired[int]
    total: NotRequired[int]
    boundary: NotRequired[BoundaryTypedDict]
    search_promotion: NotRequired[Nullable[Any]]
    results: NotRequired[List[PropertyTypedDict]]


class SearchRentResponseData(BaseModel):
    count: Optional[int] = None

    total: Optional[int] = None

    boundary: Optional[Boundary] = None

    search_promotion: OptionalNullable[Any] = UNSET

    results: Optional[List[Property]] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["count", "total", "boundary", "search_promotion", "results"]
        nullable_fields = ["search_promotion"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class SearchRentResponseTypedDict(TypedDict):
    data: NotRequired[SearchRentResponseDataTypedDict]
    meta: NotRequired[MetaTypedDict]
    status: NotRequired[bool]
    message: NotRequired[str]


class SearchRentResponse(BaseModel):
    data: Optional[SearchRentResponseData] = None

    meta: Optional[Meta] = None

    status: Optional[bool] = None

    message: Optional[str] = None
