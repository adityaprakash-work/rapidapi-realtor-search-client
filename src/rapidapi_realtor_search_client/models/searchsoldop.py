"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .boundary import Boundary, BoundaryTypedDict
from .expandsearcharea import ExpandSearchArea
from .meta import Meta, MetaTypedDict
from .property import Property, PropertyTypedDict
from .sortbysold import SortBySold
from datetime import date
import pydantic
from pydantic import model_serializer
from rapidapi_realtor_search_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from rapidapi_realtor_search_client.utils import FieldMetadata, QueryParamMetadata
from typing import Any, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SearchSoldRequestTypedDict(TypedDict):
    location: str
    r"""Location can be retrieved from /properties/auto-complete endpoint (data->autocomplete->id).
    Example: city:New York, NY

    """
    zone_id: NotRequired[str]
    r"""For accurate results, you should select the correct zoneId for your area.
    Example: America/New_York

    """
    min_sold_date: NotRequired[date]
    r"""Min sold date.
    Example: 2024-02-19

    """
    results_per_page: NotRequired[int]
    r"""Total number of records per API call.
    Example: 20

    """
    page: NotRequired[int]
    r"""The page index, for paging purpose.
    Example: 2

    """
    sort_by: NotRequired[SortBySold]
    r"""Sort by.
    Example: lowest_price

    """
    expand_search_area: NotRequired[ExpandSearchArea]
    r"""Expand search area.
    Example: 1

    """
    property_type: NotRequired[str]
    r"""Property type. It can input multiple values, and the values should be separated by commas.
    Example: condo,co_op

    """
    prices: NotRequired[str]
    r"""Prices. Min and max prices should be separated by commas.
    Example: 1200,12345
    In the case of only having the minimum price: Example: 1200,
    In the case of only having the maximum price: Example: ,12345
    In case of having both: Example: 1200,12345

    """
    bedrooms: NotRequired[int]
    r"""Bedrooms. It has a value ranging from 0 to 5.
    Example: 5

    """
    bathrooms: NotRequired[int]
    r"""Bathrooms. It has a value ranging from 1 to 5.
    Example: 5

    """
    home_size: NotRequired[str]
    r"""Home size. Min and max home size should be separated by commas.
    Example: 500,1000
    In the case of only having the minimum size: Example: 500,
    In the case of only having the maximum size: Example: ,1000
    In case of having both: Example: 500,1000
    Some example values:
    500: 500 sqft
    750: 750 sqft
    1000: 1000 sqft

    """
    lot_size: NotRequired[str]
    r"""Lot size. Min and max lot size should be separated by commas.
    Example: 2000,7500

    """
    home_age: NotRequired[str]
    r"""Home age. Min and max home age should be separated by commas.
    Example: 1,5

    """


class SearchSoldRequest(BaseModel):
    location: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""Location can be retrieved from /properties/auto-complete endpoint (data->autocomplete->id).
    Example: city:New York, NY

    """

    zone_id: Annotated[
        Optional[str],
        pydantic.Field(alias="zoneId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""For accurate results, you should select the correct zoneId for your area.
    Example: America/New_York

    """

    min_sold_date: Annotated[
        Optional[date],
        pydantic.Field(alias="minSoldDate"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Min sold date.
    Example: 2024-02-19

    """

    results_per_page: Annotated[
        Optional[int],
        pydantic.Field(alias="resultsPerPage"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 20
    r"""Total number of records per API call.
    Example: 20

    """

    page: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""The page index, for paging purpose.
    Example: 2

    """

    sort_by: Annotated[
        Optional[SortBySold],
        pydantic.Field(alias="sortBy"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = SortBySold.LOWEST_PRICE
    r"""Sort by.
    Example: lowest_price

    """

    expand_search_area: Annotated[
        Optional[ExpandSearchArea],
        pydantic.Field(alias="expandSearchArea"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ExpandSearchArea.ZERO
    r"""Expand search area.
    Example: 1

    """

    property_type: Annotated[
        Optional[str],
        pydantic.Field(alias="propertyType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Property type. It can input multiple values, and the values should be separated by commas.
    Example: condo,co_op

    """

    prices: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Prices. Min and max prices should be separated by commas.
    Example: 1200,12345
    In the case of only having the minimum price: Example: 1200,
    In the case of only having the maximum price: Example: ,12345
    In case of having both: Example: 1200,12345

    """

    bedrooms: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Bedrooms. It has a value ranging from 0 to 5.
    Example: 5

    """

    bathrooms: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Bathrooms. It has a value ranging from 1 to 5.
    Example: 5

    """

    home_size: Annotated[
        Optional[str],
        pydantic.Field(alias="homeSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Home size. Min and max home size should be separated by commas.
    Example: 500,1000
    In the case of only having the minimum size: Example: 500,
    In the case of only having the maximum size: Example: ,1000
    In case of having both: Example: 500,1000
    Some example values:
    500: 500 sqft
    750: 750 sqft
    1000: 1000 sqft

    """

    lot_size: Annotated[
        Optional[str],
        pydantic.Field(alias="lotSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Lot size. Min and max lot size should be separated by commas.
    Example: 2000,7500

    """

    home_age: Annotated[
        Optional[str],
        pydantic.Field(alias="homeAge"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Home age. Min and max home age should be separated by commas.
    Example: 1,5

    """


class SearchSoldDataTypedDict(TypedDict):
    count: NotRequired[int]
    total: NotRequired[int]
    boundary: NotRequired[BoundaryTypedDict]
    search_promotion: NotRequired[Nullable[Any]]
    results: NotRequired[List[PropertyTypedDict]]


class SearchSoldData(BaseModel):
    count: Optional[int] = None

    total: Optional[int] = None

    boundary: Optional[Boundary] = None

    search_promotion: OptionalNullable[Any] = UNSET

    results: Optional[List[Property]] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["count", "total", "boundary", "search_promotion", "results"]
        nullable_fields = ["search_promotion"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class SearchSoldResponseBodyTypedDict(TypedDict):
    r"""Successful response"""

    data: NotRequired[SearchSoldDataTypedDict]
    meta: NotRequired[MetaTypedDict]
    status: NotRequired[bool]
    message: NotRequired[str]


class SearchSoldResponseBody(BaseModel):
    r"""Successful response"""

    data: Optional[SearchSoldData] = None

    meta: Optional[Meta] = None

    status: Optional[bool] = None

    message: Optional[str] = None
