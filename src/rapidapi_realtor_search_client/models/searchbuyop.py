"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .expandsearcharea import ExpandSearchArea
from .sortby import SortBy
import pydantic
from rapidapi_realtor_search_client.types import BaseModel
from rapidapi_realtor_search_client.utils import FieldMetadata, QueryParamMetadata
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SearchBuyRequestTypedDict(TypedDict):
    location: str
    r"""Location can be retrieved from /properties/auto-complete endpoint (data->autocomplete->id).
    Example: city:New York, NY

    """
    zone_id: NotRequired[str]
    r"""For accurate results, you should select the correct zoneId for your area.
    Example: America/New_York

    """
    results_per_page: NotRequired[int]
    r"""Total number of records per API call.
    Example: 20

    """
    page: NotRequired[int]
    r"""The page index, for paging purpose.
    Example: 2

    """
    sort_by: NotRequired[SortBy]
    r"""Sort by.
    Example: relevance

    """
    expand_search_area: NotRequired[ExpandSearchArea]
    r"""Expand search area.
    Example: 1

    """
    property_type: NotRequired[str]
    r"""Property type. It can input multiple values, and the values should be separated by commas.
    Example: condo,co_op

    """
    prices: NotRequired[str]
    r"""Prices. Min and max prices should be separated by commas.
    Example: 1200,12345
    In the case of only having the minimum price: Example: 1200,
    In the case of only having the maximum price: Example: ,12345
    In case of having both: Example: 1200,12345

    """
    bedrooms: NotRequired[int]
    r"""Bedrooms. It has a value ranging from 0 to 5.
    Example: 5

    """
    bathrooms: NotRequired[int]
    r"""Bathrooms. It has a value ranging from 1 to 5.
    Example: 5

    """
    home_size: NotRequired[str]
    r"""Home size. Min and max home size should be separated by commas.
    Example: 500,1000
    In the case of only having the minimum size: Example: 500,
    In the case of only having the maximum size: Example: ,1000
    In case of having both: Example: 500,1000
    Some example values:
    500: 500 sqft
    750: 750 sqft
    1000: 1000 sqft

    """
    lot_size: NotRequired[str]
    r"""Lot size. Min and max lot size should be separated by commas.
    Example: 2000,7500

    """
    home_age: NotRequired[str]
    r"""Home age. Min and max home age should be separated by commas.
    Example: 1,5

    """
    hide_pending_contingent: NotRequired[bool]
    r"""Hide pending/contingent.

    """
    new_construction_only: NotRequired[bool]
    r"""New construction only.

    """
    hide_homes_not_yet_built: NotRequired[bool]
    r"""Hide homes not yet built.

    """
    foreclosures_only: NotRequired[bool]
    r"""Foreclosures only.

    """
    hide_foreclosures: NotRequired[bool]
    r"""Hide foreclosures.

    """
    senior_community_only: NotRequired[bool]
    r"""55+ community only.

    """
    open_houses_only: NotRequired[bool]
    r"""Open houses only.

    """
    price_recently_reduced_only: NotRequired[bool]
    r"""Price recently reduced only.

    """
    virtual_tours_only: NotRequired[bool]
    r"""Virtual tours only.

    """
    three_dtours_only: NotRequired[bool]
    r"""3D tours only.

    """
    max_hoa_fees_per_month: NotRequired[int]
    r"""Max HOA fees per month.
    Example: 0

    """
    show_homes_where_hoa_is_not_known: NotRequired[bool]
    r"""Show homes where HOA is not known.

    """
    days_on_realtor: NotRequired[int]
    r"""Days on realtor.com.
    Example: 7

    """
    garage_parking: NotRequired[str]
    r"""Garage/Parking. It can input multiple values, and the values should be separated by commas.
    Example: garage_1_or_more,garage_2_or_more
    garage_1_or_more: Garage (any)
    garage_2_or_more: Garage (2+ cars)
    garage_3_or_more: Garage (3+ cars)
    carport: Carport
    rv_or_boat_parking: RV/Boat Parking

    """
    heating_cooling: NotRequired[str]
    r"""Heating/Cooling. It can input multiple values, and the values should be separated by commas.
    Example: central_air,central_heat
    central_air: Central Air
    central_heat: Central Heat
    forced_air: Forced Air
    energy_efficient: Energy Efficient

    """
    home_features: NotRequired[str]
    r"""Home features. It can input multiple values, and the values should be separated by commas.
    Example: basement,den_or_office
    basement: Basement
    den_or_office: Den/Office
    dining_room: Dining Room
    family_room: Family Room
    game_room: Game Room
    washer_dryer: In-home Laundry
    disability_features: Accessibility Features
    fireplace: Fireplace
    hardwood_floors: Hardwood Floors
    horse_facilities: Horse Facilities
    spa_or_hot_tub: Spa/Hot Tub
    swimming_pool: Swimming Pool
    tennis_court: Tennis Court
    single_story: Single Story
    two_or_more_stories: Multi-Story
    lease_option: Lease Option
    pets_allowed: Pets Allowed

    """
    lot_features: NotRequired[str]
    r"""Lot features. It can input multiple values, and the values should be separated by commas.
    Example: corner_lot,cul_de_sac
    corner_lot: Corner Lot
    cul_de_sac: Cul de Sac
    golf_course_lot_or_frontage: Golf Course Lot
    waterfront: Waterfront
    city_view: City View
    golf_course_view: Golf Course View
    hill_or_mountain_view: Hill/Mountain View
    lake_view: Lake View
    ocean_view: Ocean View
    river_view: River View
    water_view: Water View
    view: View (any)

    """
    community_features: NotRequired[str]
    r"""Community features. It can input multiple values, and the values should be separated by commas.
    Example: community_swimming_pool,community_boat_facilities
    community_swimming_pool: Swimming Pool
    community_boat_facilities: Boat Facilities
    community_spa_or_hot_tub: Spa/Hot Tub
    community_tennis_court: Tennis Court(s)
    community_golf: Golf
    community_clubhouse: Clubhouse
    community_security_features: Security Features
    senior_community: Senior Community
    community_horse_facilities: Horse Facilities
    community_park: Park
    recreation_facilities: Recreation Facilities

    """
    nyc_amenities: NotRequired[str]
    r"""NYC amenities. It can input multiple values, and the values should be separated by commas.
    Example: community_doorman,community_elevator
    community_doorman: Doorman
    community_elevator: Elevator
    dishwasher: Dishwasher
    community_outdoor_space: Outdoor Space
    laundry_room: Laundry Room

    """


class SearchBuyRequest(BaseModel):
    location: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""Location can be retrieved from /properties/auto-complete endpoint (data->autocomplete->id).
    Example: city:New York, NY

    """

    zone_id: Annotated[
        Optional[str],
        pydantic.Field(alias="zoneId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""For accurate results, you should select the correct zoneId for your area.
    Example: America/New_York

    """

    results_per_page: Annotated[
        Optional[int],
        pydantic.Field(alias="resultsPerPage"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 20
    r"""Total number of records per API call.
    Example: 20

    """

    page: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""The page index, for paging purpose.
    Example: 2

    """

    sort_by: Annotated[
        Optional[SortBy],
        pydantic.Field(alias="sortBy"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = SortBy.RELEVANCE
    r"""Sort by.
    Example: relevance

    """

    expand_search_area: Annotated[
        Optional[ExpandSearchArea],
        pydantic.Field(alias="expandSearchArea"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = ExpandSearchArea.ZERO
    r"""Expand search area.
    Example: 1

    """

    property_type: Annotated[
        Optional[str],
        pydantic.Field(alias="propertyType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Property type. It can input multiple values, and the values should be separated by commas.
    Example: condo,co_op

    """

    prices: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Prices. Min and max prices should be separated by commas.
    Example: 1200,12345
    In the case of only having the minimum price: Example: 1200,
    In the case of only having the maximum price: Example: ,12345
    In case of having both: Example: 1200,12345

    """

    bedrooms: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Bedrooms. It has a value ranging from 0 to 5.
    Example: 5

    """

    bathrooms: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Bathrooms. It has a value ranging from 1 to 5.
    Example: 5

    """

    home_size: Annotated[
        Optional[str],
        pydantic.Field(alias="homeSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Home size. Min and max home size should be separated by commas.
    Example: 500,1000
    In the case of only having the minimum size: Example: 500,
    In the case of only having the maximum size: Example: ,1000
    In case of having both: Example: 500,1000
    Some example values:
    500: 500 sqft
    750: 750 sqft
    1000: 1000 sqft

    """

    lot_size: Annotated[
        Optional[str],
        pydantic.Field(alias="lotSize"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Lot size. Min and max lot size should be separated by commas.
    Example: 2000,7500

    """

    home_age: Annotated[
        Optional[str],
        pydantic.Field(alias="homeAge"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Home age. Min and max home age should be separated by commas.
    Example: 1,5

    """

    hide_pending_contingent: Annotated[
        Optional[bool],
        pydantic.Field(alias="hidePendingContingent"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""Hide pending/contingent.

    """

    new_construction_only: Annotated[
        Optional[bool],
        pydantic.Field(alias="newConstructionOnly"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""New construction only.

    """

    hide_homes_not_yet_built: Annotated[
        Optional[bool],
        pydantic.Field(alias="hideHomesNotYetBuilt"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""Hide homes not yet built.

    """

    foreclosures_only: Annotated[
        Optional[bool],
        pydantic.Field(alias="foreclosuresOnly"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""Foreclosures only.

    """

    hide_foreclosures: Annotated[
        Optional[bool],
        pydantic.Field(alias="hideForeclosures"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""Hide foreclosures.

    """

    senior_community_only: Annotated[
        Optional[bool],
        pydantic.Field(alias="seniorCommunityOnly"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""55+ community only.

    """

    open_houses_only: Annotated[
        Optional[bool],
        pydantic.Field(alias="openHousesOnly"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""Open houses only.

    """

    price_recently_reduced_only: Annotated[
        Optional[bool],
        pydantic.Field(alias="priceRecentlyReducedOnly"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""Price recently reduced only.

    """

    virtual_tours_only: Annotated[
        Optional[bool],
        pydantic.Field(alias="virtualToursOnly"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""Virtual tours only.

    """

    three_dtours_only: Annotated[
        Optional[bool],
        pydantic.Field(alias="threeDtoursOnly"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""3D tours only.

    """

    max_hoa_fees_per_month: Annotated[
        Optional[int],
        pydantic.Field(alias="maxHoaFeesPerMonth"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Max HOA fees per month.
    Example: 0

    """

    show_homes_where_hoa_is_not_known: Annotated[
        Optional[bool],
        pydantic.Field(alias="showHomesWhereHoaIsNotKnown"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""Show homes where HOA is not known.

    """

    days_on_realtor: Annotated[
        Optional[int],
        pydantic.Field(alias="daysOnRealtor"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Days on realtor.com.
    Example: 7

    """

    garage_parking: Annotated[
        Optional[str],
        pydantic.Field(alias="garageParking"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Garage/Parking. It can input multiple values, and the values should be separated by commas.
    Example: garage_1_or_more,garage_2_or_more
    garage_1_or_more: Garage (any)
    garage_2_or_more: Garage (2+ cars)
    garage_3_or_more: Garage (3+ cars)
    carport: Carport
    rv_or_boat_parking: RV/Boat Parking

    """

    heating_cooling: Annotated[
        Optional[str],
        pydantic.Field(alias="heatingCooling"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Heating/Cooling. It can input multiple values, and the values should be separated by commas.
    Example: central_air,central_heat
    central_air: Central Air
    central_heat: Central Heat
    forced_air: Forced Air
    energy_efficient: Energy Efficient

    """

    home_features: Annotated[
        Optional[str],
        pydantic.Field(alias="homeFeatures"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Home features. It can input multiple values, and the values should be separated by commas.
    Example: basement,den_or_office
    basement: Basement
    den_or_office: Den/Office
    dining_room: Dining Room
    family_room: Family Room
    game_room: Game Room
    washer_dryer: In-home Laundry
    disability_features: Accessibility Features
    fireplace: Fireplace
    hardwood_floors: Hardwood Floors
    horse_facilities: Horse Facilities
    spa_or_hot_tub: Spa/Hot Tub
    swimming_pool: Swimming Pool
    tennis_court: Tennis Court
    single_story: Single Story
    two_or_more_stories: Multi-Story
    lease_option: Lease Option
    pets_allowed: Pets Allowed

    """

    lot_features: Annotated[
        Optional[str],
        pydantic.Field(alias="lotFeatures"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Lot features. It can input multiple values, and the values should be separated by commas.
    Example: corner_lot,cul_de_sac
    corner_lot: Corner Lot
    cul_de_sac: Cul de Sac
    golf_course_lot_or_frontage: Golf Course Lot
    waterfront: Waterfront
    city_view: City View
    golf_course_view: Golf Course View
    hill_or_mountain_view: Hill/Mountain View
    lake_view: Lake View
    ocean_view: Ocean View
    river_view: River View
    water_view: Water View
    view: View (any)

    """

    community_features: Annotated[
        Optional[str],
        pydantic.Field(alias="communityFeatures"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Community features. It can input multiple values, and the values should be separated by commas.
    Example: community_swimming_pool,community_boat_facilities
    community_swimming_pool: Swimming Pool
    community_boat_facilities: Boat Facilities
    community_spa_or_hot_tub: Spa/Hot Tub
    community_tennis_court: Tennis Court(s)
    community_golf: Golf
    community_clubhouse: Clubhouse
    community_security_features: Security Features
    senior_community: Senior Community
    community_horse_facilities: Horse Facilities
    community_park: Park
    recreation_facilities: Recreation Facilities

    """

    nyc_amenities: Annotated[
        Optional[str],
        pydantic.Field(alias="nycAmenities"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""NYC amenities. It can input multiple values, and the values should be separated by commas.
    Example: community_doorman,community_elevator
    community_doorman: Doorman
    community_elevator: Elevator
    dishwasher: Dishwasher
    community_outdoor_space: Outdoor Space
    laundry_room: Laundry Room

    """
